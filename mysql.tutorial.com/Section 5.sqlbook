-- Active: 1712274533216@@127.0.0.1@3306@classicmodels




EXPLAIN select
    status
from
    orders


select status, count(*)
from
    orders
GROUP BY
    STATUS



select
    status
from
     orders
GROUP BY
    status


select
    DISTINCT status
from
    orders


select
    state
from
   offices


select
    state
from
   offices
GROUP BY
    state


select
    status,
    count(*)
from
    orders
Group BY
    status


SELECT
    orders.status,
    sum(quantityOrdered * priceEach) as Total_Amount
FROM
    orders
inner JOIN
    orderdetails
USING(orderNumber)
GROUP BY
    status



EXPLAIN SELECT
  orderNumber,
  SUM(quantityOrdered * priceEach) AS total
FROM
  orderdetails
GROUP BY
  orderNumber
  with rollup


    select
        year(orderDate) as year,
        sum(quantityOrdered * priceEach) as Total_Amount
    from
        orders
    inner JOIN
        orderdetails
    USING(orderNumber)
    WHERE
        status = 'Shipped'
    GROUP BY
        year(orderDate)


    select
        year(orderDate) as year,
        sum(quantityOrdered * priceEach) as Total_Amount
    from
        orders
    inner JOIN
        orderdetails
    USING(orderNumber)
    WHERE
        status = 'Shipped'
    GROUP BY
        YEAR
    HAVING
        Total_Amount > 10000


  select
        month (orderDate) as month,
        sum(quantityOrdered * priceEach) as Total_Amount
    from
        orders
    inner JOIN
        orderdetails
    USING(orderNumber)
    WHERE
        status = 'Shipped'
    GROUP BY
        year


select MONTH(orderdate)
from orders
group by MONTH(orderdate)

select DAY(orderdate)
from orders
group by MONTH(orderdate)


SELECT
    count(`customerNumber`) as Total_Amount,
    month(`orderNumber`) as month
FROM
    orders
GROUP BY
    month(`orderNumber`)




select
    orderdetails.orderNumber,
    sum(quantityOrdered * priceEach) as Total_Amount,
    orders.status
from
    orders
inner JOIN
    orderdetails
USING(orderNumber)
GROUP BY
    orderdetails.`orderNumber`,
    orders.status
HAVING
    orders.status = 'Shipped'
    AND
    Total_Amount > 10000

SELECT
    year(orderDate) as year,
    status,
    sum(quantityOrdered * priceEach) as Total_Amount
FROM
    orders
inner JOIN
    orderdetails
USING(orderNumber)
GROUP BY
    year,
    status
HAVING
    Total_Amount > 10000


# HAVING

select
    ordernumber,
    sum(quantityOrdered) as items_Count,
    sum(quantityOrdered * priceEach) as Total_Amount
from
    orderdetails
GROUP BY
    orderNumber
HAVING
Total_Amount > 10000

SELECT
    ordernumber,
    SUM(quantityOrdered) AS itemsCount,
    SUM(priceeach*quantityOrdered) AS total
FROM
    orderdetails
GROUP BY ordernumber
HAVING
    total > 1000
    AND
    itemsCount > 600;



select
    orderdetails.orderNumber,
    orders.status,
    sum(quantityOrdered * priceEach) as Total_Amount
from
    orderdetails
inner JOIN
    orders
USING(orderNumber)
GROUP BY
    orderdetails.orderNumber,
    orders.status
HAVING
    status = 'Shipped'
    AND
    Total_Amount > 1500;


SELECT
  customerName,
  COUNT(*) order_count
FROM
  orders
  INNER JOIN customers using (customerNumber)
GROUP BY
  customerName
HAVING
  COUNT(*) > 4
ORDER BY
  order_count;


SELECT
    productline,
    SUM(orderValue) totalOrderValue
FROM
    sales
GROUP BY
    productline;

CREATE TABLE sales
SELECT
    productLine,
    YEAR(orderDate) orderYear,
    SUM(quantityOrdered * priceEach) orderValue
FROM
    orderDetails
        INNER JOIN
    orders USING (orderNumber)
        INNER JOIN
    products USING (productCode)
GROUP BY
    productLine ,
    YEAR(orderDate);

    SELECT
    productline,
    SUM(orderValue) totalOrderValue
FROM
    sales
GROUP BY
    productline;

    SELECT * FROM sales;

    SELECT
    orderYear,
    productLine,
    SUM(orderValue) totalOrderValue,
    GROUPING(orderYear),
    GROUPING(productLine)
FROM
    sales
GROUP BY
    orderYear,
    productline
WITH ROLLUP;



SELECT
    productLine,
    orderYear,
    SUM(orderValue) totalOrderValue
FROM
    sales
GROUP BY
    productline,
    orderYear
WITH ROLLUP;

/**
 * This SQL query retrieves the total order value for each combination of order year and product line from the 'sales' table.
 * It uses the GROUP BY clause to group the data by order year and product line.
 * The IF function is used to display 'All Years' when the order year is NULL or 'All Product Lines' when the product line is NULL.
 * The ROLLUP keyword is used to include additional rows that represent subtotals and grand totals.
 *
 * @param sales: The table containing the sales data.
 * @return The result set includes the order year, product line, and total order value for each combination, as well as subtotals and grand totals.
 */
SELECT
    IF(GROUPING(orderYear),
        'All Years',
        orderYear) orderYear,
    IF(GROUPING(productLine),
        'All Product Lines',
        productLine) productLine,
    SUM(orderValue) totalOrderValue
FROM
    sales
GROUP BY
    orderYear ,
    productline
WITH ROLLUP;

select *
from sales;